{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/asya/Desktop/crypto-list-app/src/actions/crypto.ts"],"sourcesContent":["'use server';\n\nimport { CryptoItem, CryptoItemInsert } from '@/types/supabase';\nimport { createClient } from '@supabase/supabase-js';\nimport { revalidatePath } from 'next/cache';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function addCryptoItem(data: CryptoItemInsert) {\n  try {\n    const { data: insertedData, error } = await supabase\n      .from('crypto-item')\n      .insert(data)\n      .select()\n      .single();\n\n    if (error) throw error;\n\n    revalidatePath('/');\n    return { data: insertedData as CryptoItem, error: null };\n  } catch (error) {\n    if (error instanceof Error) {\n      console.error('Error inserting data:', error.message);\n      return { data: null, error: error.message };\n    }\n    return {\n      data: null,\n      error: 'Failed to add cryptocurrency. Please try again.',\n    };\n  }\n}\n\nexport async function getUserCryptoList(userId: string | null) {\n  try {\n    let query = supabase\n      .from('crypto-item')\n      .select('*')\n      .order('created_at', { ascending: false });\n\n    if (userId) {\n      query = query.eq('userId', userId);\n    }\n\n    const { data, error } = await query;\n\n    if (error) throw error;\n\n    return { data: data as CryptoItem[], error: null };\n  } catch (error) {\n    if (error instanceof Error) {\n      console.error('Error fetching data:', error.message);\n      return { data: null, error: error.message };\n    }\n    return { data: null, error: 'Failed to fetch cryptocurrency list.' };\n  }\n}\n\nexport async function editCryptoItem(\n  id: string,\n  data: Partial<CryptoItemInsert>\n) {\n  try {\n    const { data: updatedData, error } = await supabase\n      .from('crypto-item')\n      .update(data)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n\n    revalidatePath('/');\n    return { data: updatedData as CryptoItem, error: null };\n  } catch (error) {\n    if (error instanceof Error) {\n      console.error('Error editing data:', error.message);\n      return { data: null, error: error.message };\n    }\n    return { data: null, error: 'Failed to edit list item' };\n  }\n}\n\nexport async function deleteCryptoItem(id: string) {\n  try {\n    const { error } = await supabase.from('crypto-item').delete().eq('id', id);\n\n    if (error) throw error;\n\n    revalidatePath('/');\n    return { data: true, error: null };\n  } catch (error) {\n    if (error instanceof Error) {\n      console.error('Error deleting item:', error.message);\n      return { data: null, error: error.message };\n    }\n    return { data: null, error: 'Failed to delete list item' };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAIA;;AADA;;;;;AAGA,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD;AAKrB,eAAe,uCAAW,GAAX,cAAc,IAAsB;IACxD,IAAI;QACF,MAAM,EAAE,MAAM,YAAY,EAAE,KAAK,EAAE,GAAG,MAAM,SACzC,IAAI,CAAC,eACL,MAAM,CAAC,MACP,MAAM,GACN,MAAM;QAET,IAAI,OAAO,MAAM;QAEjB,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,MAAM;YAA4B,OAAO;QAAK;IACzD,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,OAAO;YAC1B,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO;YACpD,OAAO;gBAAE,MAAM;gBAAM,OAAO,MAAM,OAAO;YAAC;QAC5C;QACA,OAAO;YACL,MAAM;YACN,OAAO;QACT;IACF;AACF;AAEO,eAAe,uCAAe,GAAf,kBAAkB,MAAqB;IAC3D,IAAI;QACF,IAAI,QAAQ,SACT,IAAI,CAAC,eACL,MAAM,CAAC,KACP,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM;QAE1C,IAAI,QAAQ;YACV,QAAQ,MAAM,EAAE,CAAC,UAAU;QAC7B;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM;QAE9B,IAAI,OAAO,MAAM;QAEjB,OAAO;YAAE,MAAM;YAAsB,OAAO;QAAK;IACnD,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,OAAO;YAC1B,QAAQ,KAAK,CAAC,wBAAwB,MAAM,OAAO;YACnD,OAAO;gBAAE,MAAM;gBAAM,OAAO,MAAM,OAAO;YAAC;QAC5C;QACA,OAAO;YAAE,MAAM;YAAM,OAAO;QAAuC;IACrE;AACF;AAEO,eAAe,uCAAY,GAAZ,eACpB,EAAU,EACV,IAA+B;IAE/B,IAAI;QACF,MAAM,EAAE,MAAM,WAAW,EAAE,KAAK,EAAE,GAAG,MAAM,SACxC,IAAI,CAAC,eACL,MAAM,CAAC,MACP,EAAE,CAAC,MAAM,IACT,MAAM,GACN,MAAM;QAET,IAAI,OAAO,MAAM;QAEjB,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,MAAM;YAA2B,OAAO;QAAK;IACxD,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,OAAO;YAC1B,QAAQ,KAAK,CAAC,uBAAuB,MAAM,OAAO;YAClD,OAAO;gBAAE,MAAM;gBAAM,OAAO,MAAM,OAAO;YAAC;QAC5C;QACA,OAAO;YAAE,MAAM;YAAM,OAAO;QAA2B;IACzD;AACF;AAEO,eAAe,uCAAc,GAAd,iBAAiB,EAAU;IAC/C,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,eAAe,MAAM,GAAG,EAAE,CAAC,MAAM;QAEvE,IAAI,OAAO,MAAM;QAEjB,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,MAAM;YAAM,OAAO;QAAK;IACnC,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,OAAO;YAC1B,QAAQ,KAAK,CAAC,wBAAwB,MAAM,OAAO;YACnD,OAAO;gBAAE,MAAM;gBAAM,OAAO,MAAM,OAAO;YAAC;QAC5C;QACA,OAAO;YAAE,MAAM;YAAM,OAAO;QAA6B;IAC3D;AACF;;;IAzFsB;IAwBA;IAyBA;IAyBA;;AA1EA,+OAAA;AAwBA,+OAAA;AAyBA,+OAAA;AAyBA,+OAAA"}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///home/asya/Desktop/crypto-list-app/src/app/page.tsx"],"sourcesContent":["import { useState } from 'react';\nimport CryptoListItems from './CryptoListItems';\nimport CryptoForm from './CryptoForm';\nimport { getUserCryptoList } from '@/actions/crypto';\n\nexport default function CryptoPage() {\n  const [editItem, setEditItem] = useState<CryptoItem | null>(null);\n  const [items, setItems] = useState<CryptoItem[]>([]);\n\n  async function fetchItems() {\n    const { data } = await getUserCryptoList(userId);\n    if (data) setItems(data);\n  }\n\n  return (\n    <div>\n      <CryptoForm\n        editItem={editItem}\n        onSave={() => {\n          setEditItem(null);\n          fetchItems();\n        }}\n      />\n      <CryptoListItems items={items} onEdit={setEditItem} />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;AAGA;;;;;;AAEe,SAAS;IACtB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqB;IAC5D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAgB,EAAE;IAEnD,eAAe;QACb,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,CAAA,GAAA,wHAAA,CAAA,oBAAiB,AAAD,EAAE;QACzC,IAAI,MAAM,SAAS;IACrB;IAEA,qBACE,8OAAC;;0BACC,8OAAC;gBACC,UAAU;gBACV,QAAQ;oBACN,YAAY;oBACZ;gBACF;;;;;;0BAEF,8OAAC;gBAAgB,OAAO;gBAAO,QAAQ;;;;;;;;;;;;AAG7C"}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}